[
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "argv",
        "importPath": "sys",
        "description": "sys",
        "isExtraImport": true,
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "sys",
        "description": "sys",
        "isExtraImport": true,
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "tool",
        "importPath": "json",
        "description": "json",
        "isExtraImport": true,
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "tushare",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tushare",
        "description": "tushare",
        "detail": "tushare",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "yfinance",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "yfinance",
        "description": "yfinance",
        "detail": "yfinance",
        "documentation": {}
    },
    {
        "label": "pandas",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pandas",
        "description": "pandas",
        "detail": "pandas",
        "documentation": {}
    },
    {
        "label": "matplotlib.pyplot",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "matplotlib.pyplot",
        "description": "matplotlib.pyplot",
        "detail": "matplotlib.pyplot",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "Numpy.NumPy",
        "description": "Numpy.NumPy",
        "peekOfCode": "x = np.empty([3,2], dtype = int) \nprint (x)\nx = np.array([[  0,  1,  2],[  3,  4,  5],[  6,  7,  8],[  9,  10,  11]])  \nprint ('我们的数组是：' )\nprint (x)\nprint ('\\n')\nrows = np.array([[0,0],[3,3]]) \ncols = np.array([[0,2],[0,2]]) \nprint(f'rows= {rows}')\ny = x[rows,cols]  ",
        "detail": "Numpy.NumPy",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "Numpy.NumPy",
        "description": "Numpy.NumPy",
        "peekOfCode": "x = np.array([[  0,  1,  2],[  3,  4,  5],[  6,  7,  8],[  9,  10,  11]])  \nprint ('我们的数组是：' )\nprint (x)\nprint ('\\n')\nrows = np.array([[0,0],[3,3]]) \ncols = np.array([[0,2],[0,2]]) \nprint(f'rows= {rows}')\ny = x[rows,cols]  \ny = x[[0,3],:] [:,[0,2]] \nprint  ('这个数组的四个角元素是：')",
        "detail": "Numpy.NumPy",
        "documentation": {}
    },
    {
        "label": "rows",
        "kind": 5,
        "importPath": "Numpy.NumPy",
        "description": "Numpy.NumPy",
        "peekOfCode": "rows = np.array([[0,0],[3,3]]) \ncols = np.array([[0,2],[0,2]]) \nprint(f'rows= {rows}')\ny = x[rows,cols]  \ny = x[[0,3],:] [:,[0,2]] \nprint  ('这个数组的四个角元素是：')\nprint (y)\nprint(f'=========> { x[[1,2],[1]]}')\n# a = np.array([[1,2,3], [4,5,6],[7,8,9],[7,8,9]])\n# b = a[1:3, 1:3]",
        "detail": "Numpy.NumPy",
        "documentation": {}
    },
    {
        "label": "cols",
        "kind": 5,
        "importPath": "Numpy.NumPy",
        "description": "Numpy.NumPy",
        "peekOfCode": "cols = np.array([[0,2],[0,2]]) \nprint(f'rows= {rows}')\ny = x[rows,cols]  \ny = x[[0,3],:] [:,[0,2]] \nprint  ('这个数组的四个角元素是：')\nprint (y)\nprint(f'=========> { x[[1,2],[1]]}')\n# a = np.array([[1,2,3], [4,5,6],[7,8,9],[7,8,9]])\n# b = a[1:3, 1:3]\n# c = a[1:3,[1,2]]",
        "detail": "Numpy.NumPy",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "Numpy.NumPy",
        "description": "Numpy.NumPy",
        "peekOfCode": "y = x[rows,cols]  \ny = x[[0,3],:] [:,[0,2]] \nprint  ('这个数组的四个角元素是：')\nprint (y)\nprint(f'=========> { x[[1,2],[1]]}')\n# a = np.array([[1,2,3], [4,5,6],[7,8,9],[7,8,9]])\n# b = a[1:3, 1:3]\n# c = a[1:3,[1,2]]\n# d = a[...,1:]\n# print(f'b= {b}')",
        "detail": "Numpy.NumPy",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "Numpy.NumPy",
        "description": "Numpy.NumPy",
        "peekOfCode": "y = x[[0,3],:] [:,[0,2]] \nprint  ('这个数组的四个角元素是：')\nprint (y)\nprint(f'=========> { x[[1,2],[1]]}')\n# a = np.array([[1,2,3], [4,5,6],[7,8,9],[7,8,9]])\n# b = a[1:3, 1:3]\n# c = a[1:3,[1,2]]\n# d = a[...,1:]\n# print(f'b= {b}')\n# print(f'c= {c}')",
        "detail": "Numpy.NumPy",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "Numpy.NumPy高级索引",
        "description": "Numpy.NumPy高级索引",
        "peekOfCode": "a = np.array( [10,20,30,40] )\nb = np.array( [1, 2, 3, 4] )\n# x = 4*np.sin(a)\n# x = a.max() # 40\n# x = a.min() # 10\n# x = a.sum() # 100\n# x = a.std() # 11.180339887498949\n# x = a.all() # True\n# x = a.cumsum() # array([ 10,  30,  60, 100])\n# x = b.sum(axis=1) # 多维可以指定方向",
        "detail": "Numpy.NumPy高级索引",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "Numpy.NumPy高级索引",
        "description": "Numpy.NumPy高级索引",
        "peekOfCode": "b = np.array( [1, 2, 3, 4] )\n# x = 4*np.sin(a)\n# x = a.max() # 40\n# x = a.min() # 10\n# x = a.sum() # 100\n# x = a.std() # 11.180339887498949\n# x = a.all() # True\n# x = a.cumsum() # array([ 10,  30,  60, 100])\n# x = b.sum(axis=1) # 多维可以指定方向\n# np.negative(-1) # 1 相反数",
        "detail": "Numpy.NumPy高级索引",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "Numpy.NumPy高级索引",
        "description": "Numpy.NumPy高级索引",
        "peekOfCode": "x = 10\n# y = np.where(False, 1, 10) # array(1)\ny = np.logical_and(x>0, x>5) # True\n# y = np.logical_or(x>0, x<5) # True\n# y = np.logical_not(x>5) # False\n# y = np.logical_xor(x>5, x==0) # 异或 True\nprint(y)",
        "detail": "Numpy.NumPy高级索引",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "Numpy.NumPy高级索引",
        "description": "Numpy.NumPy高级索引",
        "peekOfCode": "y = np.logical_and(x>0, x>5) # True\n# y = np.logical_or(x>0, x<5) # True\n# y = np.logical_not(x>5) # False\n# y = np.logical_xor(x>5, x==0) # 异或 True\nprint(y)",
        "detail": "Numpy.NumPy高级索引",
        "documentation": {}
    },
    {
        "label": "FileHandle",
        "kind": 6,
        "importPath": "基础语法.OOP",
        "description": "基础语法.OOP",
        "peekOfCode": "class FileHandle(object): #处理文件的类\n    def read(self, path):\n        print(\"read file\")\n        # 读取文件内容\n    def write(self, path, value):\n        __path = path\n        print(\"write file\")\n        # 写入文件内容\nclass DbHandle(object): #处理数据库的类\\\n    def read(self, path):",
        "detail": "基础语法.OOP",
        "documentation": {}
    },
    {
        "label": "DbHandle",
        "kind": 6,
        "importPath": "基础语法.OOP",
        "description": "基础语法.OOP",
        "peekOfCode": "class DbHandle(object): #处理数据库的类\\\n    def read(self, path):\n        print(\"read Db\")\n        # 读取文件内容\n    def write(self, path, value):\n        __path = path\n        print(\"write Db\")\n        # 写入文件内容\n#Tool 同时集成了两个类,选择第一个父类\nclass Tool(DbHandle, FileHandle):",
        "detail": "基础语法.OOP",
        "documentation": {}
    },
    {
        "label": "Tool",
        "kind": 6,
        "importPath": "基础语法.OOP",
        "description": "基础语法.OOP",
        "peekOfCode": "class Tool(DbHandle, FileHandle):\n# class Tool(FileHandle, DbHandle):\n    def businessLogic(self):\n        print(\"In Tool class\")\ntool = Tool()\ntool.read(\"C:\\\\1.txt\")\n#组合方式实现多继承\n# class Tool(object):\n#     def __init__(self):\n#         self.fileHandle = FileHandle()",
        "detail": "基础语法.OOP",
        "documentation": {}
    },
    {
        "label": "tool",
        "kind": 5,
        "importPath": "基础语法.OOP",
        "description": "基础语法.OOP",
        "peekOfCode": "tool = Tool()\ntool.read(\"C:\\\\1.txt\")\n#组合方式实现多继承\n# class Tool(object):\n#     def __init__(self):\n#         self.fileHandle = FileHandle()\n#         self.dbHandle = DbHandle()\n#     def calDAtaInFile(self, path):\n#         self.fileHandle.read(path)\n#         #统计文件里的数据",
        "detail": "基础语法.OOP",
        "documentation": {}
    },
    {
        "label": "pro",
        "kind": 5,
        "importPath": "基础语法.urlopen",
        "description": "基础语法.urlopen",
        "peekOfCode": "pro = ts.pro_api()\nfileNmae = 'sotck.csv'\ndf = pro.trade_cal(exchange='', start_date='20180901', end_date='20181001', fields='exchange,cal_date,is_open,pretrade_date', is_open='0')\nprint(df)\n# stockList.to_csv(fileNmae)",
        "detail": "基础语法.urlopen",
        "documentation": {}
    },
    {
        "label": "fileNmae",
        "kind": 5,
        "importPath": "基础语法.urlopen",
        "description": "基础语法.urlopen",
        "peekOfCode": "fileNmae = 'sotck.csv'\ndf = pro.trade_cal(exchange='', start_date='20180901', end_date='20181001', fields='exchange,cal_date,is_open,pretrade_date', is_open='0')\nprint(df)\n# stockList.to_csv(fileNmae)",
        "detail": "基础语法.urlopen",
        "documentation": {}
    },
    {
        "label": "df",
        "kind": 5,
        "importPath": "基础语法.urlopen",
        "description": "基础语法.urlopen",
        "peekOfCode": "df = pro.trade_cal(exchange='', start_date='20180901', end_date='20181001', fields='exchange,cal_date,is_open,pretrade_date', is_open='0')\nprint(df)\n# stockList.to_csv(fileNmae)",
        "detail": "基础语法.urlopen",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "基础语法.函数",
        "description": "基础语法.函数",
        "peekOfCode": "x = False\ny = False\nz = True\nif x or y and z:\n    print(\"yes\")\nelse:\n    print(\"no\")",
        "detail": "基础语法.函数",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "基础语法.函数",
        "description": "基础语法.函数",
        "peekOfCode": "y = False\nz = True\nif x or y and z:\n    print(\"yes\")\nelse:\n    print(\"no\")",
        "detail": "基础语法.函数",
        "documentation": {}
    },
    {
        "label": "z",
        "kind": 5,
        "importPath": "基础语法.函数",
        "description": "基础语法.函数",
        "peekOfCode": "z = True\nif x or y and z:\n    print(\"yes\")\nelse:\n    print(\"no\")",
        "detail": "基础语法.函数",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "基础语法.基本数据类型",
        "description": "基础语法.基本数据类型",
        "peekOfCode": "a = True\nprint(int(a))\na, b, c, d = 20, 5.5, True, 4+3j\nprint(type(a), type(b), type(c), type(d))\nprint(isinstance(a, int)) # 判断a是否为整数\n# ------------------------------------------------------------\n# isinstance 和 type 的区别在于：\n# type()不会认为子类是一种父类类型。\n# isinstance()会认为子类是一种父类类型。\n# Python3 中，bool 是 int 的子类，True 和 False 可以和数字相加， True==1、False==0 会返回 True，但可以通过 is 来判断类型。",
        "detail": "基础语法.基本数据类型",
        "documentation": {}
    },
    {
        "label": "tup1",
        "kind": 5,
        "importPath": "基础语法.基本数据类型",
        "description": "基础语法.基本数据类型",
        "peekOfCode": "tup1 = tuple()   # 空元组\ntup2 = (20,) # 一个元素，需要在元素后添加逗号\nprint(bool(tup1))\n# ------------------------------------------------------------\nprint('Set------------------------------------------------------------')\nsites = {'Google', 'Taobao', 'Runoob', 'Facebook', 'Zhihu', 'Baidu', 'Google'}\nprint(sites)   # 输出集合，重复的元素被自动去掉\n# 成员测试\nif 'Runoob' in sites :\n    print('Runoob 在集合中')",
        "detail": "基础语法.基本数据类型",
        "documentation": {}
    },
    {
        "label": "tup2",
        "kind": 5,
        "importPath": "基础语法.基本数据类型",
        "description": "基础语法.基本数据类型",
        "peekOfCode": "tup2 = (20,) # 一个元素，需要在元素后添加逗号\nprint(bool(tup1))\n# ------------------------------------------------------------\nprint('Set------------------------------------------------------------')\nsites = {'Google', 'Taobao', 'Runoob', 'Facebook', 'Zhihu', 'Baidu', 'Google'}\nprint(sites)   # 输出集合，重复的元素被自动去掉\n# 成员测试\nif 'Runoob' in sites :\n    print('Runoob 在集合中')\nelse :",
        "detail": "基础语法.基本数据类型",
        "documentation": {}
    },
    {
        "label": "sites",
        "kind": 5,
        "importPath": "基础语法.基本数据类型",
        "description": "基础语法.基本数据类型",
        "peekOfCode": "sites = {'Google', 'Taobao', 'Runoob', 'Facebook', 'Zhihu', 'Baidu', 'Google'}\nprint(sites)   # 输出集合，重复的元素被自动去掉\n# 成员测试\nif 'Runoob' in sites :\n    print('Runoob 在集合中')\nelse :\n    print('Runoob 不在集合中')\n# set可以进行集合运算\na = set('abracadabra')\nb = set('alacazam')",
        "detail": "基础语法.基本数据类型",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "基础语法.基本数据类型",
        "description": "基础语法.基本数据类型",
        "peekOfCode": "a = set('abracadabra')\nb = set('alacazam')\nprint(a)\nprint(a - b)     # a 和 b 的差集\nprint(a | b)     # a 和 b 的并集\nprint(a & b)     # a 和 b 的交集\nprint(a ^ b)     # a 和 b 中不同时存在的元素\n# ------------------------------------------------------------\nprint('Dictionary------------------------------------------------------------')\ndict = {}",
        "detail": "基础语法.基本数据类型",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "基础语法.基本数据类型",
        "description": "基础语法.基本数据类型",
        "peekOfCode": "b = set('alacazam')\nprint(a)\nprint(a - b)     # a 和 b 的差集\nprint(a | b)     # a 和 b 的并集\nprint(a & b)     # a 和 b 的交集\nprint(a ^ b)     # a 和 b 中不同时存在的元素\n# ------------------------------------------------------------\nprint('Dictionary------------------------------------------------------------')\ndict = {}\ndict['one'] = \"1 - 菜鸟教程\"",
        "detail": "基础语法.基本数据类型",
        "documentation": {}
    },
    {
        "label": "dict",
        "kind": 5,
        "importPath": "基础语法.基本数据类型",
        "description": "基础语法.基本数据类型",
        "peekOfCode": "dict = {}\ndict['one'] = \"1 - 菜鸟教程\"\ndict[2]     = \"2 - 菜鸟工具\"\ntinydict = {'name': 'runoob','code':1, 'site': 'www.runoob.com'}\nprint (dict['one'])       # 输出键为 'one' 的值\nprint (dict[2])           # 输出键为 2 的值\nprint (tinydict)          # 输出完整的字典\nprint (tinydict.keys())   # 输出所有键\nprint (tinydict.values()) # 输出所有值\n# ------------------------------------------------------------",
        "detail": "基础语法.基本数据类型",
        "documentation": {}
    },
    {
        "label": "dict['one']",
        "kind": 5,
        "importPath": "基础语法.基本数据类型",
        "description": "基础语法.基本数据类型",
        "peekOfCode": "dict['one'] = \"1 - 菜鸟教程\"\ndict[2]     = \"2 - 菜鸟工具\"\ntinydict = {'name': 'runoob','code':1, 'site': 'www.runoob.com'}\nprint (dict['one'])       # 输出键为 'one' 的值\nprint (dict[2])           # 输出键为 2 的值\nprint (tinydict)          # 输出完整的字典\nprint (tinydict.keys())   # 输出所有键\nprint (tinydict.values()) # 输出所有值\n# ------------------------------------------------------------\nprint('bytes ------------------------------------------------------------')",
        "detail": "基础语法.基本数据类型",
        "documentation": {}
    },
    {
        "label": "tinydict",
        "kind": 5,
        "importPath": "基础语法.基本数据类型",
        "description": "基础语法.基本数据类型",
        "peekOfCode": "tinydict = {'name': 'runoob','code':1, 'site': 'www.runoob.com'}\nprint (dict['one'])       # 输出键为 'one' 的值\nprint (dict[2])           # 输出键为 2 的值\nprint (tinydict)          # 输出完整的字典\nprint (tinydict.keys())   # 输出所有键\nprint (tinydict.values()) # 输出所有值\n# ------------------------------------------------------------\nprint('bytes ------------------------------------------------------------')\nx = bytes(\"hello\", encoding=\"utf-8\")\nprint(x)",
        "detail": "基础语法.基本数据类型",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "基础语法.基本数据类型",
        "description": "基础语法.基本数据类型",
        "peekOfCode": "x = bytes(\"hello\", encoding=\"utf-8\")\nprint(x)\nx = b\"hello\"\ny = x[1:3]  # 切片操作，得到 b\"el\"\nz = x + b\"world\"  # 拼接操作，得到 b\"helloworld\"\nx = b\"hello\"\nprint(x[0])\nif x[0] == ord(\"h\"):  #其中 ord() 函数用于将字符转换为相应的整数值。\n    print(\"The first element is 'h'\")\n# ------------------------------------------------------------",
        "detail": "基础语法.基本数据类型",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "基础语法.基本数据类型",
        "description": "基础语法.基本数据类型",
        "peekOfCode": "x = b\"hello\"\ny = x[1:3]  # 切片操作，得到 b\"el\"\nz = x + b\"world\"  # 拼接操作，得到 b\"helloworld\"\nx = b\"hello\"\nprint(x[0])\nif x[0] == ord(\"h\"):  #其中 ord() 函数用于将字符转换为相应的整数值。\n    print(\"The first element is 'h'\")\n# ------------------------------------------------------------\nvar1 = 'Hello World!' \nprint (\"已更新字符串 : \", var1[:6] + 'Runoob!')",
        "detail": "基础语法.基本数据类型",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "基础语法.基本数据类型",
        "description": "基础语法.基本数据类型",
        "peekOfCode": "y = x[1:3]  # 切片操作，得到 b\"el\"\nz = x + b\"world\"  # 拼接操作，得到 b\"helloworld\"\nx = b\"hello\"\nprint(x[0])\nif x[0] == ord(\"h\"):  #其中 ord() 函数用于将字符转换为相应的整数值。\n    print(\"The first element is 'h'\")\n# ------------------------------------------------------------\nvar1 = 'Hello World!' \nprint (\"已更新字符串 : \", var1[:6] + 'Runoob!')\n# 使用 \\r 实现百分比进度：",
        "detail": "基础语法.基本数据类型",
        "documentation": {}
    },
    {
        "label": "z",
        "kind": 5,
        "importPath": "基础语法.基本数据类型",
        "description": "基础语法.基本数据类型",
        "peekOfCode": "z = x + b\"world\"  # 拼接操作，得到 b\"helloworld\"\nx = b\"hello\"\nprint(x[0])\nif x[0] == ord(\"h\"):  #其中 ord() 函数用于将字符转换为相应的整数值。\n    print(\"The first element is 'h'\")\n# ------------------------------------------------------------\nvar1 = 'Hello World!' \nprint (\"已更新字符串 : \", var1[:6] + 'Runoob!')\n# 使用 \\r 实现百分比进度：\nfor i in range(101):",
        "detail": "基础语法.基本数据类型",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "基础语法.基本数据类型",
        "description": "基础语法.基本数据类型",
        "peekOfCode": "x = b\"hello\"\nprint(x[0])\nif x[0] == ord(\"h\"):  #其中 ord() 函数用于将字符转换为相应的整数值。\n    print(\"The first element is 'h'\")\n# ------------------------------------------------------------\nvar1 = 'Hello World!' \nprint (\"已更新字符串 : \", var1[:6] + 'Runoob!')\n# 使用 \\r 实现百分比进度：\nfor i in range(101):\n    print(\"\\r{:3}%\".format(i),end=' ')",
        "detail": "基础语法.基本数据类型",
        "documentation": {}
    },
    {
        "label": "var1",
        "kind": 5,
        "importPath": "基础语法.基本数据类型",
        "description": "基础语法.基本数据类型",
        "peekOfCode": "var1 = 'Hello World!' \nprint (\"已更新字符串 : \", var1[:6] + 'Runoob!')\n# 使用 \\r 实现百分比进度：\nfor i in range(101):\n    print(\"\\r{:3}%\".format(i),end=' ')\n    time.sleep(0.05)",
        "detail": "基础语法.基本数据类型",
        "documentation": {}
    },
    {
        "label": "creatEven",
        "kind": 6,
        "importPath": "基础语法.迭代器与生成器",
        "description": "基础语法.迭代器与生成器",
        "peekOfCode": "class creatEven:\n    def __init__(self, min, max):\n        self.value = min\n        self.min = min\n        self.max = max\n    def __iter__(self):\n        print('__iter__')\n        return self\n    def __next__(self):\n        print('__next__')",
        "detail": "基础语法.迭代器与生成器",
        "documentation": {}
    },
    {
        "label": "myEvneList",
        "kind": 5,
        "importPath": "基础语法.迭代器与生成器",
        "description": "基础语法.迭代器与生成器",
        "peekOfCode": "myEvneList = creatEven(0, 6)\nfor i in myEvneList:\n    print(i)\n    if(i>=10):\n        break",
        "detail": "基础语法.迭代器与生成器",
        "documentation": {}
    },
    {
        "label": "symbol",
        "kind": 5,
        "importPath": "基础语法.量化test",
        "description": "基础语法.量化test",
        "peekOfCode": "symbol = \"600519.SS\"\nstart_date = \"2022-01-01\"\nend_date = \"2023-01-01\"\ndata = yf.download(symbol, start=start_date, end=end_date)\n# 简单的数据分析\nprint(data.describe())\n# 绘制股价走势图\ndata['Close'].plot(figsize=(10, 6), label=symbol)\nplt.title(f\"{symbol} Stock Price\")\nplt.xlabel(\"Date\")",
        "detail": "基础语法.量化test",
        "documentation": {}
    },
    {
        "label": "start_date",
        "kind": 5,
        "importPath": "基础语法.量化test",
        "description": "基础语法.量化test",
        "peekOfCode": "start_date = \"2022-01-01\"\nend_date = \"2023-01-01\"\ndata = yf.download(symbol, start=start_date, end=end_date)\n# 简单的数据分析\nprint(data.describe())\n# 绘制股价走势图\ndata['Close'].plot(figsize=(10, 6), label=symbol)\nplt.title(f\"{symbol} Stock Price\")\nplt.xlabel(\"Date\")\nplt.ylabel(\"Price\")",
        "detail": "基础语法.量化test",
        "documentation": {}
    },
    {
        "label": "end_date",
        "kind": 5,
        "importPath": "基础语法.量化test",
        "description": "基础语法.量化test",
        "peekOfCode": "end_date = \"2023-01-01\"\ndata = yf.download(symbol, start=start_date, end=end_date)\n# 简单的数据分析\nprint(data.describe())\n# 绘制股价走势图\ndata['Close'].plot(figsize=(10, 6), label=symbol)\nplt.title(f\"{symbol} Stock Price\")\nplt.xlabel(\"Date\")\nplt.ylabel(\"Price\")\nplt.legend()",
        "detail": "基础语法.量化test",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "基础语法.量化test",
        "description": "基础语法.量化test",
        "peekOfCode": "data = yf.download(symbol, start=start_date, end=end_date)\n# 简单的数据分析\nprint(data.describe())\n# 绘制股价走势图\ndata['Close'].plot(figsize=(10, 6), label=symbol)\nplt.title(f\"{symbol} Stock Price\")\nplt.xlabel(\"Date\")\nplt.ylabel(\"Price\")\nplt.legend()\nplt.show()",
        "detail": "基础语法.量化test",
        "documentation": {}
    },
    {
        "label": "Manager",
        "kind": 6,
        "importPath": "基础语法.静态属性",
        "description": "基础语法.静态属性",
        "peekOfCode": "class Manager():\n\t#静态属性，所有实例只有一个备份，用户实现--单例模型或者资源管理还是有些用处的\n    data_set = {}\n    access_count = 0\n    def __init__(self,num):\n        Manager.data_set['default']={\n            'name':'init_name',\n            'data':[num]\n        }\n        #成员属性可以与静态属性重名",
        "detail": "基础语法.静态属性",
        "documentation": {}
    }
]